*Домашнее задание №1*

**Инструкция по работе с Git**

## **1. Основные команды Git - Первая часть**

**git init** - инициализация локального репозитория

**git status** - получить информацию от Git о текущем состоянии

**git add** - добавить файл или файлы к следующему коммиту

**git log** - вывод на экран истории всех коммитов с их хеш-кодами

**git checkout** - переход от одного коммита к другому

**git checkout master** - вернуться к актуальному состоянию и продолжить работу

**git diff** - увидеть разницу между текущим файлом и закоммиченным файлом

## **2. Синтаксис языка Markdown**

## Заголовок
Для выделения заголовков, необходимо перед названием заголовка поставить символ "#" с пробелом. Количество символов "#" задает уровень заголовка (поддерживается 6 уровней).

= или - подчеркиванием этими символами (не менее 3 подряд) выделяют заголовки первого ("=") или второго ("-") уровней

**Полужирное начертание**

Для полужирного начертания, необходимо слово / текст обозначить символами "**" или "__"(двойное подчеркивание) с обеих сторон, без пробелов.

*Курсивное начертание*

Для курсивного начертания, необходимо слово / текст обозначить символами "*" или "_" с обеих сторон, без пробелов.

***Полужирное курсивное начертание***

Для полужирного курсивного начертания, необходимо слово / текст обозначить символами "***" с обеих сторон, без пробелов.

~~Зачеркнутый текст~~

Для отображения зачеркнутого текста, необходимо слово / текст обозначить символами "~~" с обеих сторон, без пробелов.

* Ненумерованные списки

Для создания ненумерованных списков, необходимо поставить символ "*" в начале строки.

1. Нумерованные списки

Для создания нумерованных списков, необходимо поставить символ 1.,2.,3., в начале строки.

*Домашнее задание №2*

## **3. Основные команды Git - Вторая часть**

**git branch** - выводит на экран список веток

**git branch <название ветки на английском>** - создание новой ветки

**git checkout <название ветки>** - переход к другой ветке

**git branch -d <название ветки>** - удалить ветку

**git log** - вывод на экран истории всех коммитов с их хеш-кодами

*Домашнее задание № 3*

## **4. Основные команды GIT - Третья часть**

**git clone <url-адрес репозитория>**  - клонирование внешнего репозитория на локальный ПК

**git push**  – отправляет локальную версию репозитория на внешний. Оператор <–u origin main> – показывает в какую ветку на внешнем репозитории

**git pull**  – получение изменений из внешнего репозитория и слияние с локальной версией. Оператор <origin main> показывает из какой ветки получаем. Возможен конфликт, который требует разрешения, commit и обратно push.
